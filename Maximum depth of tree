Given a binary tree, find its maximum depth.

The maximum depth is the number of nodes along the longest path from the root node down to the farthest leaf node.

Note: A leaf is a node with no children.

Example:

Given binary tree [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7
return its depth = 3.


public int maxDepth(TreeNode root) {
        if(root==null){
            return 0;
        }
        return 1+Math.max(maxDepth(root.left),maxDepth(root.right));
    }
    
    /////////////////////////////////////////////////////////////////////////////////
    public int maxDepth(TreeNode root)
    {
        if(root==null) return 0;
        return helper(root);
     }
    public int helper(TreeNode root)
    {
        if(root.left==null&&root.right==null) return 1;
        int left=0;
        if(root.left!=null) left=helper(root.left);
        int right=0;
        if(root.right!=null) right=helper(root.right);
        root.val=Math.max(left,right)+1;
        return root.val;
    }
